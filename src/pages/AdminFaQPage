import { useState, useEffect } from 'react';
import { collection, addDoc, updateDoc, doc, getDocs, deleteDoc } from 'firebase/firestore';
import { db } from '../firebase/config';
import { getAuth, onAuthStateChanged } from 'firebase/auth';
import { useNavigate } from 'react-router-dom';
import { ExercisePart, FAQ } from '../types';
import Layout from '../components/common/Layout';

const AdminFaqPage = () => {
  const [faqs, setFaqs] = useState<FAQ[]>([]);
  const [loading, setLoading] = useState(true);
  const [isAdmin, setIsAdmin] = useState(false);
  const [adminCheckComplete, setAdminCheckComplete] = useState(false);
  const navigate = useNavigate();
  
  const [newFaq, setNewFaq] = useState({
    question: '',
    answer: '',
    videoUrl: '',
    type: 'method' as 'method' | 'sets',
    part: 'chest' as ExercisePart
  });

  // 관리자 권한 확인
  useEffect(() => {
    const auth = getAuth();
    const unsubscribe = onAuthStateChanged(auth, (user) => {
      if (user) {
        // 관리자 여부 확인 (예시: admin 이메일 도메인 또는 커스텀 클레임 확인)
        // 실제 구현에서는 Firebase Admin SDK와 Custom Claims 사용 권장
        if (user.email?.endsWith('@admin.com')) {
          setIsAdmin(true);
        } else {
          alert('관리자 권한이 없습니다.');
          navigate('/'); // 홈으로 리다이렉트
        }
      } else {
        // 로그인되지 않은 경우
        alert('로그인이 필요합니다.');
        navigate('/login'); // 로그인 페이지로 리다이렉트
      }
      setAdminCheckComplete(true);
    });

    return () => unsubscribe();
  }, [navigate]);

  // FAQ 불러오기
  const loadFaqs = async () => {
    setLoading(true);
    try {
      const snapshot = await getDocs(collection(db, 'faqs'));
      const faqList = snapshot.docs.map(doc => ({
        id: doc.id,
        ...doc.data()
      })) as FAQ[];
      
      setFaqs(faqList);
    } catch (error) {
      console.error("FAQ 로드 오류:", error);
      alert("FAQ 목록을 불러오는 중 오류가 발생했습니다.");
    } finally {
      setLoading(false);
    }
  };

  // 관리자 확인 후 FAQ 로드
  useEffect(() => {
    if (adminCheckComplete && isAdmin) {
      loadFaqs();
    }
  }, [adminCheckComplete, isAdmin]);

  // FAQ 추가
  const addFaq = async () => {
    try {
      // 필수 필드 검증
      if (!newFaq.question || !newFaq.answer) {
        alert("질문과 답변은 필수 입력 항목입니다.");
        return;
      }
      
      // type이 'sets'인 경우 part 필드 제거
      const faqData = newFaq.type === 'sets' 
        ? { ...newFaq, part: null } 
        : newFaq;
      
      await addDoc(collection(db, 'faqs'), faqData);
      
      // 폼 초기화
      setNewFaq({
        question: '',
        answer: '',
        videoUrl: '',
        type: 'method',
        part: 'chest'
      });
      
      // 목록 새로고침
      loadFaqs();
      
      alert("FAQ가 성공적으로 추가되었습니다.");
    } catch (error) {
      console.error("FAQ 추가 오류:", error);
      alert("FAQ 추가 중 오류가 발생했습니다.");
    }
  };

  // FAQ 삭제
  const deleteFaq = async (id: string) => {
    if (!window.confirm("정말 삭제하시겠습니까?")) return;
    
    try {
      await deleteDoc(doc(db, 'faqs', id));
      alert("FAQ가 삭제되었습니다.");
      loadFaqs(); // 목록 새로고침
    } catch (error) {
      console.error("FAQ 삭제 오류:", error);
      alert("FAQ 삭제 중 오류가 발생했습니다.");
    }
  };

  // 유튜브 검색 기능
  const searchYouTube = (keyword: string) => {
    const searchQuery = encodeURIComponent(`${newFaq.type === 'method' ? newFaq.part : ''} ${keyword} 운동 방법`);
    window.open(`https://www.youtube.com/results?search_query=${searchQuery}`, '_blank');
  };

  // 관리자 확인 중이거나 권한이 없는 경우
  if (!adminCheckComplete || !isAdmin) {
    return (
      <Layout>
        <div className="flex items-center justify-center h-screen">
          <div className="text-center">
            <div className="h-8 w-8 border-4 border-blue-500 border-t-transparent rounded-full animate-spin mx-auto mb-4"></div>
            <p>권한을 확인하는 중입니다...</p>
          </div>
        </div>
      </Layout>
    );
  }

  return (
    <Layout>
      <div className="container max-w-4xl mx-auto px-4 py-6">
        <h1 className="text-2xl font-bold mb-6">FAQ 관리</h1>
        
        {/* 새 FAQ 추가 폼 */}
        <div className="bg-white dark:bg-gray-800 rounded shadow p-6 mb-6">
          <h2 className="text-xl font-semibold mb-4">새 FAQ 추가</h2>
          
          <div className="grid grid-cols-1 md:grid-cols-2 gap-4 mb-4">
            <div>
              <label className="block text-gray-700 dark:text-gray-300 font-medium mb-2">타입:</label>
              <select 
                className="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md bg-white dark:bg-gray-700 text-gray-800 dark:text-white"
                value={newFaq.type} 
                onChange={(e) => setNewFaq({...newFaq, type: e.target.value as 'method' | 'sets'})}
              >
                <option value="method">운동 방법</option>
                <option value="sets">운동 세트 수</option>
              </select>
            </div>
            
            {newFaq.type === 'method' && (
              <div>
                <label className="block text-gray-700 dark:text-gray-300 font-medium mb-2">부위:</label>
                <select 
                  className="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md bg-white dark:bg-gray-700 text-gray-800 dark:text-white"
                  value={newFaq.part} 
                  onChange={(e) => setNewFaq({...newFaq, part: e.target.value as ExercisePart})}
                >
                  <option value="chest">가슴</option>
                  <option value="back">등</option>
                  <option value="shoulder">어깨</option>
                  <option value="leg">하체</option>
                </select>
              </div>
            )}
          </div>
          
          <div className="mb-4">
            <label className="block text-gray-700 dark:text-gray-300 font-medium mb-2">질문:</label>
            <input 
              type="text" 
              className="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md bg-white dark:bg-gray-700 text-gray-800 dark:text-white"
              value={newFaq.question} 
              onChange={(e) => setNewFaq({...newFaq, question: e.target.value})}
              placeholder="예: 벤치 프레스 자세는 어떻게 되나요?"
            />
          </div>
          
          <div className="mb-4">
            <label className="block text-gray-700 dark:text-gray-300 font-medium mb-2">답변:</label>
            <textarea 
              className="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md bg-white dark:bg-gray-700 text-gray-800 dark:text-white h-32"
              value={newFaq.answer} 
              onChange={(e) => setNewFaq({...newFaq, answer: e.target.value})}
              placeholder="답변을 상세히 작성해주세요..."
            ></textarea>
          </div>
          
          <div className="mb-4">
            <div className="flex justify-between items-center mb-2">
              <label className="block text-gray-700 dark:text-gray-300 font-medium">유튜브 URL:</label>
              <button 
                onClick={() => searchYouTube(newFaq.question)}
                className="text-sm text-blue-500 hover:text-blue-700"
                type="button"
              >
                관련 유튜브 검색 열기
              </button>
            </div>
            <input 
              type="text" 
              className="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md bg-white dark:bg-gray-700 text-gray-800 dark:text-white"
              value={newFaq.videoUrl} 
              onChange={(e) => setNewFaq({...newFaq, videoUrl: e.target.value})}
              placeholder="https://www.youtube.com/watch?v=..."
            />
            <p className="text-xs text-gray-500 mt-1">
              유튜브 영상 URL을 입력하세요. 입력하지 않으면 영상 링크가 표시되지 않습니다.
            </p>
          </div>
          
          <button 
            onClick={addFaq}
            className="px-4 py-2 bg-blue-500 text-white rounded hover:bg-blue-600 focus:outline-none focus:ring-2 focus:ring-blue-300"
            type="button"
          >
            FAQ 추가
          </button>
        </div>
        
        {/* FAQ 목록 */}
        <div className="bg-white dark:bg-gray-800 rounded shadow p-6">
          <h2 className="text-xl font-semibold mb-4">FAQ 목록</h2>
          
          {loading ? (
            <div className="flex justify-center py-8">
              <div className="h-8 w-8 border-4 border-blue-500 border-t-transparent rounded-full animate-spin"></div>
            </div>
          ) : faqs.length === 0 ? (
            <div className="text-center py-8">
              <p className="text-gray-500 dark:text-gray-400">등록된 FAQ가 없습니다.</p>
            </div>
          ) : (
            <div className="space-y-6">
              {faqs.map(faq => (
                <div key={faq.id} className="border border-gray-200 dark:border-gray-700 rounded-lg p-4">
                  <div className="flex justify-between mb-3">
                    <div>
                      <span className="px-2 py-1 bg-gray-100 dark:bg-gray-700 text-gray-800 dark:text-gray-200 text-xs rounded mr-2">
                        {faq.type === 'method' ? '운동 방법' : '운동 세트'}
                      </span>
                      {faq.part && (
                        <span className="px-2 py-1 bg-blue-100 dark:bg-blue-900 text-blue-800 dark:text-blue-200 text-xs rounded">
                          {faq.part === 'chest' ? '가슴' : 
                           faq.part === 'back' ? '등' : 
                           faq.part === 'shoulder' ? '어깨' : '하체'}
                        </span>
                      )}
                    </div>
                    <button 
                      onClick={() => deleteFaq(faq.id)}
                      className="text-red-500 hover:text-red-700 text-sm"
                      type="button"
                    >
                      삭제
                    </button>
                  </div>
                  
                  <h3 className="font-bold text-gray-800 dark:text-white mb-2">{faq.question}</h3>
                  <p className="text-gray-600 dark:text-gray-300 mb-3 whitespace-pre-line">{faq.answer}</p>
                  
                  {faq.videoUrl && (
                    <div className="mt-2">
                      <a 
                        href={faq.videoUrl} 
                        target="_blank" 
                        rel="noopener noreferrer"
                        className="inline-flex items-center text-blue-500 hover:text-blue-700"
                      >
                        <svg xmlns="http://www.w3.org/2000/svg" className="h-4 w-4 mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M14.752 11.168l-3.197-2.132A1 1 0 0010 9.87v4.263a1 1 0 001.555.832l3.197-2.132a1 1 0 000-1.664z" />
                          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
                        </svg>
                        유튜브 영상 보기
                      </a>
                    </div>
                  )}
                </div>
              ))}
            </div>
          )}
        </div>
      </div>
    </Layout>
  );
};

export default AdminFaqPage;
